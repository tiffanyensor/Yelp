#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul 31 17:34:06 2018

@author: tiffanyensor
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import psycopg2
import folium
import re

from collections import Counter

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, r2_score
from sklearn.feature_extraction.text import TfidfVectorizer

SQL_password = 'password'

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# SQL FUNCTIONS
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------


def postgres_query(string_command, password=SQL_password):
    """
    takes in PostgreSQL command as text, outputs dataframe
    """
    conn = psycopg2.connect(host="localhost",database="Yelp", user="postgres", password=password)
    cur = conn.cursor()
    cur.execute(string_command)
    conn.commit()
    rows = cur.fetchall()
    colnames = [desc[0] for desc in cur.description]
    cur.close()
    conn.close()
    rows =  [list(i) for i in rows]
    rows = pd.DataFrame(rows, columns=colnames)
    return rows

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 2. Top 10 restaurants in Toronto with highest popularity. You are free to
# define your ‘popularity’, as long as it makes sense.
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# A popular restaurant should be: open, with lots of 4 and 5 star reviews

# Get open restaurants in Toronto and order by number of positive reviews
# where positive review >= 4
    
data = postgres_query("""SELECT business.name, COUNT(*) AS n_pos_rev
                      FROM business
                      JOIN reviews on reviews.business_id = business.business_id
                      WHERE reviews.stars >= 4
                      AND business.city LIKE 'Toronto'
                      AND business.is_open = 1
                      AND business.categories LIKE '%Restaurant%'
                      GROUP BY business.name
                      ORDER BY COUNT(*) DESC;
                      """)


# Plot top 10 restaurants: name vs number of positive rating

plt.figure(1, figsize = (5,8))
plt.gca().invert_yaxis()
plt.barh(data.name[:10], data.n_pos_rev[:10])
plt.tick_params(labelsize=14)
plt.title("Top 10 Popular Restaurants in Toronto", fontsize=16)
plt.xlabel("Number of Positive Reviews", fontsize=14)
plt.savefig("PopularTorontoRestaurants.pdf", bbox_inches="tight")
plt.show()



#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 3. How many Canadian residents reviewed the business “Mon Ami Gabi” in last 1 year?
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Get a list of people who have reviewed Mon Ami Gabi in the past year,
# for people meeting this condition, get the states/provinces of the other places they've reviewed

# Subquery selects the users who have reviewed Mon Ami Gabi in the past year

subquery = """(SELECT reviews.user_id
               FROM reviews
               JOIN business ON reviews.business_id = business.business_id
               WHERE reviews.review_date > (current_date - interval '1 year') 
               AND business.name = 'Mon Ami Gabi'
               )"""

# List of unique users who reviewed MAG in the past year   

MAG_reviewers = postgres_query(subquery+';')
MAG_reviewers = list(MAG_reviewers["user_id"])

# Get the state/province for each review made by the users selected in the subquery

MAG_other_review_locs = postgres_query("""SELECT users.user_id, business.state_province 
                                       FROM reviews
                                       JOIN users on users.user_id = reviews.user_id 
                                       JOIN business on business.business_id = reviews.business_id
                                       WHERE users.user_id IN ("""+subquery+""");
                                       """)

CAD_prov = ['AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'ON', 'PE', 'QC', 'SK', 'YT']


# add users to dictionary
user_dict = {}
for user in MAG_reviewers:
    user_dict[user] = {"CAD":0, "non_CAD":0}

# for each user, count the number of Canadian businesses and non-Canadian
# businessed they have reviewed
    
for i in range(len(MAG_other_review_locs)):
    user = MAG_other_review_locs["user_id"][i]
    state = MAG_other_review_locs["state_province"][i]
    if state in CAD_prov:
        user_dict[user]["CAD"] = user_dict[user]["CAD"] + 1
    else:
        user_dict[user]["non_CAD"] = user_dict[user]["non_CAD"] + 1
    
# if a user has reviewed more Canadian than non-Canadian businesses, they're Canadian

n_canadians = 0
for user in user_dict:
    if user_dict[user]["CAD"] > user_dict[user]["non_CAD"]:
        n_canadians = n_canadians + 1

print("There are ",n_canadians," Canadians who have reviewed Mon Ami Gabi in the past year.")
      

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 4. Top 10 most common words in the reviews of the business “Chipotle Mexican Grill”
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Select all "Chipotle Mexican Grill" reviews from the SQL database

CMG_data = postgres_query("""SELECT reviews.review_text 
                          FROM reviews 
                          JOIN business ON business.business_id = reviews.business_id 
                          WHERE business.name LIKE 'Chipotle Mexican Grill';""")


# Simple tokenizer function

def simple_tokenizer(review):
    review = review.replace("\n", " ")             # replace newline ch
    review = review.lower()                        # convert to lowercase
    review = re.sub('[^a-zA-Z]', ' ', review)      # remove non alpha characters
    tokens = review.split()                        # split into words
    return tokens


# Get a list of tokenized words
tokenized_words =[]

for rev in CMG_data["review_text"]:
    tokens = simple_tokenizer(rev)
    for word in tokens:
        tokenized_words.append(word)
    

# Count occurence of each word in tokenized_words and order by frequency
word_count = Counter(tokenized_words).most_common()

top_10_chipotle_words = [word[0] for word in word_count[:10]]

print("The top 10 most frequent words in the Chipotle reviews are :")
for index, word in enumerate(top_10_chipotle_words):
    print(index+1,". ",word)

# From an analytics point of view, this is not very helpful.
# Remove stopwords.

stop_words = set(stopwords.words('english'))

# Tokenizer function
def better_tokenizer(review):
    tokens = simple_tokenizer(review)
    tokens = [t for t in tokens if len(t) > 2]              # remove short words
    tokens = [t for t in tokens if t not in stop_words]     # remove stopwords
    return tokens

new_tokenized_words =[]

for rev in CMG_data["review_text"]:
    tokens = better_tokenizer(rev)
    for word in tokens:
        new_tokenized_words.append(word)


# Count occurence of each word in tokenized_words and order by frequency
word_count = Counter(new_tokenized_words).most_common()
top_10_chipotle_words = [word[0] for word in word_count[:10]]

print("The top 10 most frequent USEFUL words in the Chipotle reviews are :")
for index, word in enumerate(top_10_chipotle_words):
    print(index+1,". ",word)




#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 6. What’s the percentage of users, who reviewed “Mon Ami Gabi”, and also
# reviewed at least 10 other restaurants located in Ontario?
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Total number of reviewers
n_reviewers = postgres_query("SELECT COUNT(DISTINCT(user_id)) FROM reviews;").values
n_reviewers = n_reviewers[0][0]


# Get users who reviewed "Mon Ami Gabi"
MonAmiGabi_reviewers = postgres_query("""
                           SELECT reviews.user_id
                           FROM reviews 
                           JOIN business on reviews.business_id = business.business_id 
                           WHERE business.name LIKE 'Mon Ami Gabi';
                           """)    

    
# Get users who reviewed at least 10 restaurantts in ON
Ontario_reviewers = postgres_query("""SELECT reviews.user_id, COUNT(*) 
                                 FROM reviews
                                 JOIN users ON users.user_id = reviews.user_id
                                 JOIN business ON business.business_id = reviews.business_id
                                 WHERE business.state_province LIKE 'ON'
                                 AND business.categories LIKE '%Restaurant%'
                                 GROUP BY reviews.user_id
                                 HAVING COUNT(*) >= 10
                                 """)

# Number of users who reviewed "Mon Ami Gabi"
n_MonAmiGabi_reviewers = MonAmiGabi_reviewers["user_id"].count()

# Number of users who reviewed "Mon Ami Gabi" and at least 10 other restaurants in Ontario
counter = 0

for user in Ontario_reviewers["user_id"]:
    if user in MonAmiGabi_reviewers["user_id"].values:
        counter = counter + 1

# Calculate percent of MonAmiGabi reviewers that reviewed at least 10 ON restaurants
percent_of_MonAmiGabi = (counter*100.0/n_MonAmiGabi_reviewers)

percent_of_total = (counter*100.0/n_reviewers)

print(round(percent_of_total,4),"% of reviewers reviewed both Mon Ami Gabi and at least 10 Ontario restaurants.")
print(round(percent_of_MonAmiGabi,4),"% of reviewers who reviewed Mon Ami Gabi also reviewed at least 10 Ontario restaurants.")



#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# EXTRA ANALYSIS: Plot the bakeries in Toronto on a map to see underserviced areas
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# conda install -c conda-forge folium 

def map_Toronto_business(category):
    
    """
    Takes in category as a string and creates an .html map of Toronto
    with "category" locations identified
    """
    
    
    map_data = postgres_query("""SELECT name, latitude, longitude, categories
                          FROM business
                          WHERE city LIKE 'Toronto'
                          AND categories LIKE '%"""+category+"""%';""")

    if map_data.empty:
        print('There are no businesses in the database with the category "'+category+'".')
        return None

    # Use folium to draw a map of Toronto, plotting the locations on top
    TO_map=folium.Map([43.6543, -79.3860], tiles = "Stamen Toner", zoom_start=12)


    for i in range(len(map_data)):
        TO_map.add_child(folium.CircleMarker(location=[map_data["latitude"][i], map_data["longitude"][i]], radius=4, color='red', opacity=0.4))
    
    TO_map.save(category+"_Toronto_map.html")
    print("Your map has been saved as "+category+"_Toronto_map.html in the current directory.")


map_Toronto_business("Hair Salon")
map_Toronto_business("Pizza")
map_Toronto_business("Bakeries")
map_Toronto_business("Steakhouse")
map_Toronto_business("Fitness")
map_Toronto_business("Restaurant")

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# EXTRA: The most popular restaurant in Toronto is Pai Northern Thai
# Kitchen. How have their reviews changed over the years?
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

def ratings_by_year(business_name):
    """
    Plots the number of reviews (split up by ratings) for a given business 
    """
    
    # replace SQL escape character
    business_name = business_name.replace("'", "''")
    
    bus_data = postgres_query("""SELECT extract(year from reviews.review_date) as review_year, 
                              reviews.stars, COUNT(*)
                              FROM reviews
                              JOIN business ON reviews.business_id = business.business_id
                              WHERE business.name LIKE '"""+business_name+"""'
                              GROUP BY review_year, reviews.stars;
                              """)
    
    if bus_data.empty:
        print('There is no information on the business "'+business_name+'".')
        return None;
    
    bus_data = bus_data.fillna(0)
    bus_data = bus_data.astype(int)

    bus_data = bus_data.pivot(index="review_year", columns="stars", values="count")
    years = bus_data.index
    
    # Set up plot area, leaving room on the right for the legend
    ax = plt.subplot(111)
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])

    # Stacked bar plots
    p1=plt.bar(years, bus_data[1], color='red')
    p2=plt.bar(years, bus_data[2], bottom=bus_data[1], color='gold')
    p3=plt.bar(years, bus_data[3], bottom=bus_data[1]+bus_data[2], color='yellow')
    p4=plt.bar(years, bus_data[4], bottom=bus_data[1]+bus_data[2]+bus_data[3], color='palegreen')
    p5=plt.bar(years, bus_data[5], bottom=bus_data[1]+bus_data[2]+bus_data[3]+bus_data[4], color='mediumseagreen')

    # Plot specifications
    ax.legend((p1, p2, p3, p4, p5), ('1 Star', '2 Star', '3 Star', '4 Star', '5 Star'), loc = "upper left", bbox_to_anchor = (1, 1))
    plt.title(business_name+" Ratings by Year")
    plt.xlabel("Year")
    plt.ylabel("Number of Reviews")
    plt.savefig(business_name+"_Ratings_By_Year.pdf", bbox_inches="tight")
    plt.show()

# Try this out for a few businesses
    
ratings_by_year("Pai Northern Thai Kitchen")
ratings_by_year("Subway")
ratings_by_year("Mon Ami Gabi")
ratings_by_year("ARIA Resort & Casino")
ratings_by_year("Blockbuster")


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Given a review text, could you predict how many stars the reviewer will rate a
# restaurant? We want a prediction model, which can predict the rating(stars) based the
# review text and the reviewers’ behaviors.
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# PERFORMING SENTIMENT ANALYSIS ON REVIEW_TEXT
#------------------------------------------------------------------------------

# get stars and reviews
review_data = postgres_query("""SELECT reviews.stars, reviews.review_text
                             FROM reviews 
                             JOIN business ON business.business_id = reviews.business_id
                             WHERE business.categories LIKE '%Restaurant%'
                             LIMIT 400000;""")

# which star-rating has the smallest # of reviews
counts = review_data["stars"].value_counts()
max_count = min(counts)
plt.bar(["1-star","2-star","3-star","4-star","5-star"], [counts[1], counts[2], counts[3], counts[4], counts[5]])
plt.xlabel("Rating", fontsize=12)
plt.ylabel("Number of Reviews", fontsize=12)
plt.title("Breakdown of Restaurant Reviews", fontsize=14)
plt.savefig("RestaurantRatings.pdf", bbox_inches="tight")
plt.show()


# shuffle values
review_data=review_data.iloc[:,[0,1]].values
np.random.shuffle(review_data)

# get equal number of reviews for each star-rating
labels = []
even_reviews = []
c1=0
c2=0
c3=0
c4=0
c5=0

for i in range(len(review_data)):
    if review_data[i][0] == 1.0 and c1<max_count:
        labels.append(review_data[i][0])
        even_reviews.append(review_data[i][1])
        c1 = c1+1
    elif review_data[i][0] == 2.0 and c2<max_count:
        labels.append(review_data[i][0])       
        even_reviews.append(review_data[i][1])   
        c2 = c2+1
    elif review_data[i][0] == 3.0 and c3<max_count:
        labels.append(review_data[i][0])        
        even_reviews.append(review_data[i][1])    
        c3 = c3+1
    elif review_data[i][0] == 4.0 and c4<max_count:
        labels.append(review_data[i][0])        
        even_reviews.append(review_data[i][1])    
        c4 = c4+1
    elif review_data[i][0] == 5.0 and c5<max_count:
        labels.append(review_data[i][0])        
        even_reviews.append(review_data[i][1])    
        c5 = c5+1

labels = [ int(l) for l in labels]


# Tokenize the review data
stemmer = PorterStemmer()
stop_words = set(stopwords.words('english'))

def tokenizer(review):
    review = review.lower()                                 # convert to lowercase
    review = re.sub('[^a-zA-Z]', ' ', review)               # remove non-alpha characters 
    tokens = review.split()                                 # split review into words
    tokens = [t for t in tokens if len(t) > 2]              # remove short words
    tokens = [t for t in tokens if t not in stop_words]     # remove stopwords         
    tokens = [stemmer.stem(t) for t in tokens]              # stem
    tokens = ' '.join(tokens)
    return tokens

tokenized_reviews = [] 

for rev in even_reviews:
    rev = tokenizer(rev)
    tokenized_reviews.append(rev)

# Create sparse matrix
    tfidf = TfidfVectorizer()  
tfidf = TfidfVectorizer(min_df=0.0002)               # words should occur in at least __ % of reviews
X = tfidf.fit_transform(tokenized_reviews)

# Split data into text and train set
X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.25)

# Logistic Regression gives good results
classifier = LogisticRegression()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Confusion matrix")
print(cm)
print("accuracy = ", accuracy)


# Try to predict positive vs negative vs neutral
#------------------------------------------------------------------------------

# Let's say 1-star and 2-star are negative, 3-star is neutral, 4-star and 5-star positive

pnn_ytest = len(y_test)*[0]
pnn_ytrain = len(y_train)*[0]

for i in range(len(y_test)):
    if y_test[i] == 1 or y_test[i] == 2:
        pnn_ytest[i] = -1
    if y_test[i] == 4 or y_test[i] == 5:
        pnn_ytest[i] = 1
        
for i in range(len(y_train)):
    if y_train[i] == 1 or y_train[i] == 2:
        pnn_ytrain[i] = -1
    if y_train[i] == 4 or y_train[i] == 5:
        pnn_ytrain[i] = 1
    
# Run logistic regression again
classifier = LogisticRegression()
classifier.fit(X_train, pnn_ytrain)
pnn_ypred = classifier.predict(X_test)

cm = confusion_matrix(pnn_ytest, pnn_ypred)
accuracy = accuracy_score(pnn_ytest, pnn_ypred)
r2 = r2_score(pnn_ytest, pnn_ypred)

print("Confusion matrix")
print(cm)
print("accuracy = ", accuracy)



# Try to predict positive vs negative
#------------------------------------------------------------------------------

# Let's say 1-star and 2-star are negative, 3-, 4-, and 5-star positive

pn_ytest = len(y_test)*[1]
pn_ytrain = len(y_train)*[1]

for i in range(len(y_test)):
    if y_test[i] == 1 or y_test[i] == 2:
        pn_ytest[i] = -1
        
for i in range(len(y_train)):
    if y_train[i] == 1 or y_train[i] == 2:
        pn_ytrain[i] = -1

    
# Run logistic regression again
classifier = LogisticRegression()
classifier.fit(X_train, pn_ytrain)
pn_ypred = classifier.predict(X_test)

cm = confusion_matrix(pn_ytest, pn_ypred)
accuracy = accuracy_score(pn_ytest, pn_ypred)

print("Confusion matrix")
print(cm)
print("accuracy = ", accuracy)
