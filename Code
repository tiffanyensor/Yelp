#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LIFT CO INTERVIEW ASSESSMENT

Created on Tue Jul 31 17:34:06 2018

@author: tiffanyensor
"""

########
SQL_password = 'password'
#######


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# IMPORTS
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import psycopg2

from collections import Counter

from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 1. CONVERT DATA FROM JSON FILE TO POSTGRESQL TABLE
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------


def postgres_query(string_command, password=SQL_password):
    # takes in PostgreSQL command as text, outputs dataframe
    conn = psycopg2.connect(host="localhost",database="Yelp", user="postgres", password=password)
    cur = conn.cursor()
    cur.execute(string_command)
    conn.commit()
    rows = cur.fetchall()
    colnames = [desc[0] for desc in cur.description]
    cur.close()
    conn.close()
    rows =  [list(i) for i in rows]
    rows = pd.DataFrame(rows, columns=colnames)
    return rows

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 2. Top 10 restaurants in Toronto with highest popularity. You are free to
# define your ‘popularity’, as long as it makes sense.
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Get open restaurants in Toronto and order by number of reviews
# remove bakeries, etc?
data = postgres_query("SELECT name, city, review_count, stars, categories FROM business WHERE city = 'Toronto' AND is_open = 1 AND categories LIKE '%Restaurant%' ORDER BY review_count DESC LIMIT 100;")

# Plot top 20 restaurants: name vs rating
plt.figure(1, figsize = (4,10))
plt.gca().invert_yaxis()
plt.axvline(x=4, color='red')
plt.barh(data.name[:20], data.stars[:20])
plt.title("20 Most Rated Toronto Restaurants")
plt.xlabel("Rating")
plt.savefig("Top20TorontoRestaurants.pdf", bbox_inches="tight")
plt.show()

# Top 10: let's say they need a 4 or 5 star rating
top_10_list = []
counter = 0
i = 0

while counter < 10:
    if data.stars[i] >= 4.0:
        top_10_list.append(data.name[i])
        counter += 1
    i += 1


print("The top 10 most popular Toronto restaurants are: ")
for i, val in enumerate(top_10_list):
    print(i+1,". ",val)

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 3. How many Canadian residents reviewed the business “Mon Ami Gabi” in last 1 year?
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Get users who reviewed "Mon Ami Gabi" in the last year:
MAG_reviewers_this_year = postgres_query("""SELECT reviews.uder_id, business.name, reviews.review_date 
                                         FROM reviews
                                         JOIN business ON reviews.business_id = business.business_id
                                         WHERE reviews.review_date > (current_date - interval '1 year') 
                                         AND business.name = 'Mon Ami Gabi';
                                         """)

# The problem here is finding out which reviewers are Canadian, since reviewers
# addresses are not known.

# The country where each reviewer has reviewed the most restaurants is 
# probably their home country.


    

    
# number of revies by each user:
# SELECT count(*) FROM reviews GROUP BY uder_id LIMIT 10;
"""
SELECT uder_id FROM reviews
JOIN business on business.business_id = reviews.business_id
GROUP BY uder_id 
LIMIT 10;
"""



"""
SELECT business.name, reviews.review_text, reviews.review_date FROM reviews
JOIN business ON reviews.business_id = business.business_id
WHERE reviews.review_date > (current_date - interval '1 year') 
AND business.name = 'Mon Ami Gabi'
ORDER BY reviews.review_date
LIMIT 100;
"""


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 4. Top 10 most common words in the reviews of the business “Chipotle Mexican Grill”
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Select all "Chipotle Mexican Grill" reviews from the SQL database
data = postgres_query(" SELECT business.name, reviews.review_text FROM reviews JOIN business ON business.business_id = reviews.business_id WHERE business.name LIKE 'Chipotle Mexican Grill';")

# Simple tokenizer function
def simple_tokenizer(review):
    review = review.lower()                        # convert to lowercase
    tokens = review.split()                        # split into words
    tokens = [t for t in tokens if t.isalpha()]    # remove non-alpha characters
    return tokens


# Get a list of tokenized words
tokenized_words =[]

for rev in data["review_text"]:
    tokens = simple_tokenizer(rev)
    for word in tokens:
        tokenized_words.append(word)
    

# Count occurance of each word in tokenized_words and order by frequency
word_count = Counter(tokenized_words).most_common()
top_10_chipotle_words = [word[0] for word in word_count[:10]]

print("The top 10 most frequent words in the Chipotle reviews are :")
for index, word in enumerate(top_10_chipotle_words):
    print(index+1,". ",word)

# from an analytics point of view, this is not very helpful.
# we should remove stopwords, lemmatize, and stem to get a better idea of the
# important words

stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

# Tokenizer function
def better_tokenizer(review):
    tokens = simple_tokenizer(review)
    tokens = [lemmatizer.lemmatize(t) for t in tokens]      # lemmatize
    tokens = [t for t in tokens if len(t) > 2]              # remove short words
    tokens = [t for t in tokens if t not in stop_words]     # remove stopwords
    return tokens

new_tokenized_words =[]

for rev in data["review_text"]:
    tokens = better_tokenizer(rev)
    for word in tokens:
        new_tokenized_words.append(word)


# Count occurance of each word in tokenized_words and order by frequency
word_count = Counter(new_tokenized_words).most_common()
top_10_chipotle_words = [word[0] for word in word_count[:10]]

print("The top 10 most frequent USEFUL words in the Chipotle reviews are :")
for index, word in enumerate(top_10_chipotle_words):
    print(index+1,". ",word)




#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# 6. What’s the percentage of users, who reviewed “Mon Ami Gabi”, and also
# reviewed at least 10 other restaurants located in Ontario?
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# Get users who reviewed "Mon Ami Gabi"
MonAmiGabi_reviewers = postgres_query("""
                           SELECT reviews.uder_id, reviews.business_id, business.name 
                           FROM reviews 
                           JOIN business on reviews.business_id = business.business_id 
                           WHERE business.name LIKE 'Mon Ami Gabi';
                           """)
    
    
# Get review counts > 10 for each user for restaurants in Ontario
Ontario_reviews = postgres_query("""SELECT reviews.uder_id, COUNT(*) from reviews
                                 JOIN users ON users.user_id = reviews.uder_id
                                 JOIN business ON business.business_id = reviews.business_id
                                 WHERE business.state_province LIKE 'ON'
                                 GROUP BY reviews.uder_id
                                 HAVING COUNT(*) >= 10
                                 """)

# Number of users who reviewed "Mon Ami Gabi"
n_MonAmiGabi_reviewers = MonAmiGabi_reviewers["uder_id"].count()

# Total number of reviewers
n_reviewers = postgres_query("SELECT COUNT(*) FROM reviews").values
n_reviewers = n_reviewers[0][0]

# Number of users who reviewed "Mon Ami Gabi" and at least 10 other restaurants in Ontario
counter = 0

for user in Ontario_reviews["uder_id"]:
    if user in MonAmiGabi_reviewers["uder_id"].values:
        counter = counter + 1

# Calculate percent of MonAmiGabi reviewers that reviewed at least 10 ON restaurants
percent_of_MonAmiGabi = counter/n_MonAmiGabi_reviewers

percent_of_total = (counter*100.00/n_reviewers)

print(round(percent_of_total,4),"% of reviewers reviewed both Mon Ami Gabi and at least 10 Ontario restaurants.")



#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# EXTRA ANALYSIS: Plot the bakeries in Toronto on a map to see underserviced areas
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

bakeries = postgres_query("""SELECT name, latitude, longitude, categories
                          FROM business
                          WHERE city LIKE 'Toronto'
                          AND categories LIKE '%Bakeries%';""")

plt.scatter(bakeries["latitude"], bakeries["longitude"])
plt.show()


#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# EXTRA: IDEAS
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

# - FIND THE CITIES WITH HIGHEST AND LOWEST RESTAURANT STARS
# - EXTRA: plot restaurants on a map of toronto, colour to indicate restaurant type or something like that
# - choose a particular restaurant (something with lots of reviews: make a CAP curve or ROC to predict who will reccommend)



#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
